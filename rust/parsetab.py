
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ASSIGN BOOLTYPE BREAK CHAR CHARTYPE COLON COMMENT CONST CONTINUE CRATE DIVIDE DOBLEQUOTE DYN ELSE ENUM EQUALS EXTERN FALSE FLOAT FLOATTYPE FN FOR GE GT ID IF IMPL IN INTEGER LBRACKET LE LET LOOP LPAREN LT MATCH MINUS MOD MOVE MULT MUT NE OR PLUS PUB QUOTE RBRACKET REF REMINDER RETURN RPAREN SELF SEMICOLON SIGNINTTYPE STATIC STRING STRUCT SUPER TRAIT TRUE TYPE UNSAFE UNSIGNINTTYPE USE WHERE WHILE XORstmt : decl_stmt\n            | expr_stmt\n            | SEMICOLON decl_stmt : item\n                 | let_declexpr_stmt : expr SEMICOLON item : fn_item\n            | const_item\n            | static_itemfn_item : FN ID LPAREN RPAREN block_expr const_item : CONST ID COLON type ASSIGN expr SEMICOLON static_item : STATIC ID COLON type ASSIGN expr SEMICOLON let_decl : LET MUT ID COLON type init SEMICOLON\n                | LET MUT ID COLON type SEMICOLON\n                | LET MUT ID init SEMICOLON\n                | LET MUT ID SEMICOLON\n                | LET ID COLON type init SEMICOLON\n                | LET ID COLON type SEMICOLON\n                | LET ID init SEMICOLON\n                | LET ID SEMICOLON init : ASSIGN expr\n            | exprexpr : literal\n            | block_expr\n            | binop_expr\n            | paren_expr\n            | while_expr\n            | loop_expr\n            | break_expr\n            | continue_expr\n            | if_expr\n            | return_expr block_expr : LBRACKET stmt expr RBRACKET\n                  | LBRACKET item expr RBRACKET\n                  | LBRACKET expr RBRACKET binop_expr : expr binop expr\n                  | type_cast_expr\n                  | assignment_expr\n                  | compound_assignment_expr paren_expr : LPAREN expr RPAREN while_expr : WHILE no_struct_literal_expr block_expr loop_expr : LOOP block_expr break_expr : BREAKcontinue_expr : CONTINUEif_expr : IF no_struct_literal_expr block_expr\n               | IF no_struct_literal_expr block_expr else_tail else_tail : ELSE if_expr \n                 | ELSE block_expr return_expr : RETURN\n                   | RETURN exprno_struct_literal_expr : literal\n                              | literal binop literal \n                              | literal binop literal binop literallit_suffix : IDliteral : num_lit\n               | bool_lit\n               | lit_suffix num_lit : INTEGER\n               | FLOAT bool_lit : TRUE\n                | FALSE binop : arith_op\n             | bitwise_op\n             | comp_op arith_op : PLUS\n                | MINUS\n                | MULT\n                | DIVIDE\n                | REMINDER bitwise_op : AND\n                  | OR\n                  | XOR comp_op : EQUALS\n               | NE\n               | LT\n               | GT\n               | LE\n               | GE type_cast_expr : ID AS type assignment_expr : expr ASSIGN exprcompound_assignment_expr : expr arith_op ASSIGN expr\n                               | expr bitwise_op ASSIGN expr type : SIGNINTTYPE\n            | UNSIGNINTTYPE\n            | FLOATTYPE\n            | BOOLTYPE\n            | CHARTYPE '
    
_lr_action_items = {'SEMICOLON':([0,7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,30,31,32,33,36,37,39,40,41,42,43,65,72,77,79,80,81,84,86,89,90,91,92,93,94,95,97,101,103,107,108,109,111,113,115,119,120,122,124,126,132,133,134,137,138,],[4,44,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,4,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,87,44,-42,-50,-36,-80,112,114,-22,-79,-83,-84,-85,-86,-87,-40,-35,-41,-45,-81,-82,125,127,-21,-33,-34,-46,135,136,-47,-48,140,141,142,]),'LET':([0,30,],[11,11,]),'FN':([0,30,],[23,23,]),'CONST':([0,30,],[25,25,]),'STATIC':([0,30,],[26,26,]),'LBRACKET':([0,2,3,4,6,8,9,10,24,27,28,29,30,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,73,74,75,76,78,82,83,84,87,88,91,92,93,94,95,101,112,113,114,116,119,120,121,123,124,125,127,128,129,130,135,136,139,140,141,142,],[30,-1,-2,-3,-5,-7,-8,-9,30,-55,-56,-57,30,30,30,-58,-59,-60,-61,-6,30,30,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,30,30,30,30,-51,-54,30,30,30,30,-20,30,-83,-84,-85,-86,-87,-35,-16,30,-19,30,-33,-34,-52,30,30,-15,-18,-10,30,30,-14,-17,-53,-13,-11,-12,]),'LPAREN':([0,2,3,4,6,8,9,10,24,30,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,71,73,82,83,84,87,88,91,92,93,94,95,101,112,113,114,119,120,124,125,127,128,129,130,135,136,140,141,142,],[24,-1,-2,-3,-5,-7,-8,-9,24,24,24,-6,24,24,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,24,96,24,24,24,24,24,-20,24,-83,-84,-85,-86,-87,-35,-16,24,-19,-33,-34,24,-15,-18,-10,24,24,-14,-17,-13,-11,-12,]),'WHILE':([0,2,3,4,6,8,9,10,24,30,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,73,82,83,84,87,88,91,92,93,94,95,101,112,113,114,119,120,124,125,127,128,129,130,135,136,140,141,142,],[34,-1,-2,-3,-5,-7,-8,-9,34,34,34,-6,34,34,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,34,34,34,34,34,34,-20,34,-83,-84,-85,-86,-87,-35,-16,34,-19,-33,-34,34,-15,-18,-10,34,34,-14,-17,-13,-11,-12,]),'LOOP':([0,2,3,4,6,8,9,10,24,30,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,73,82,83,84,87,88,91,92,93,94,95,101,112,113,114,119,120,124,125,127,128,129,130,135,136,140,141,142,],[35,-1,-2,-3,-5,-7,-8,-9,35,35,35,-6,35,35,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,35,35,35,35,35,35,-20,35,-83,-84,-85,-86,-87,-35,-16,35,-19,-33,-34,35,-15,-18,-10,35,35,-14,-17,-13,-11,-12,]),'BREAK':([0,2,3,4,6,8,9,10,24,30,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,73,82,83,84,87,88,91,92,93,94,95,101,112,113,114,119,120,124,125,127,128,129,130,135,136,140,141,142,],[36,-1,-2,-3,-5,-7,-8,-9,36,36,36,-6,36,36,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,36,36,36,36,36,36,-20,36,-83,-84,-85,-86,-87,-35,-16,36,-19,-33,-34,36,-15,-18,-10,36,36,-14,-17,-13,-11,-12,]),'CONTINUE':([0,2,3,4,6,8,9,10,24,30,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,73,82,83,84,87,88,91,92,93,94,95,101,112,113,114,119,120,124,125,127,128,129,130,135,136,140,141,142,],[37,-1,-2,-3,-5,-7,-8,-9,37,37,37,-6,37,37,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,37,37,37,37,37,37,-20,37,-83,-84,-85,-86,-87,-35,-16,37,-19,-33,-34,37,-15,-18,-10,37,37,-14,-17,-13,-11,-12,]),'IF':([0,2,3,4,6,8,9,10,24,30,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,73,82,83,84,87,88,91,92,93,94,95,101,112,113,114,119,120,123,124,125,127,128,129,130,135,136,140,141,142,],[38,-1,-2,-3,-5,-7,-8,-9,38,38,38,-6,38,38,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,38,38,38,38,38,38,-20,38,-83,-84,-85,-86,-87,-35,-16,38,-19,-33,-34,38,38,-15,-18,-10,38,38,-14,-17,-13,-11,-12,]),'RETURN':([0,2,3,4,6,8,9,10,24,30,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,73,82,83,84,87,88,91,92,93,94,95,101,112,113,114,119,120,124,125,127,128,129,130,135,136,140,141,142,],[39,-1,-2,-3,-5,-7,-8,-9,39,39,39,-6,39,39,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,39,39,39,39,39,39,-20,39,-83,-84,-85,-86,-87,-35,-16,39,-19,-33,-34,39,-15,-18,-10,39,39,-14,-17,-13,-11,-12,]),'INTEGER':([0,2,3,4,6,8,9,10,24,30,34,38,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,73,82,83,84,87,88,91,92,93,94,95,101,104,105,106,112,113,114,119,120,124,125,127,128,129,130,131,135,136,140,141,142,],[40,-1,-2,-3,-5,-7,-8,-9,40,40,40,40,40,-6,40,40,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,40,40,40,40,40,40,-20,40,-83,-84,-85,-86,-87,-35,40,-62,-63,-16,40,-19,-33,-34,40,-15,-18,-10,40,40,40,-14,-17,-13,-11,-12,]),'FLOAT':([0,2,3,4,6,8,9,10,24,30,34,38,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,73,82,83,84,87,88,91,92,93,94,95,101,104,105,106,112,113,114,119,120,124,125,127,128,129,130,131,135,136,140,141,142,],[41,-1,-2,-3,-5,-7,-8,-9,41,41,41,41,41,-6,41,41,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,41,41,41,41,41,41,-20,41,-83,-84,-85,-86,-87,-35,41,-62,-63,-16,41,-19,-33,-34,41,-15,-18,-10,41,41,41,-14,-17,-13,-11,-12,]),'TRUE':([0,2,3,4,6,8,9,10,24,30,34,38,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,73,82,83,84,87,88,91,92,93,94,95,101,104,105,106,112,113,114,119,120,124,125,127,128,129,130,131,135,136,140,141,142,],[42,-1,-2,-3,-5,-7,-8,-9,42,42,42,42,42,-6,42,42,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,42,42,42,42,42,42,-20,42,-83,-84,-85,-86,-87,-35,42,-62,-63,-16,42,-19,-33,-34,42,-15,-18,-10,42,42,42,-14,-17,-13,-11,-12,]),'FALSE':([0,2,3,4,6,8,9,10,24,30,34,38,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,71,73,82,83,84,87,88,91,92,93,94,95,101,104,105,106,112,113,114,119,120,124,125,127,128,129,130,131,135,136,140,141,142,],[43,-1,-2,-3,-5,-7,-8,-9,43,43,43,43,43,-6,43,43,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,43,43,43,43,43,43,-20,43,-83,-84,-85,-86,-87,-35,43,-62,-63,-16,43,-19,-33,-34,43,-15,-18,-10,43,43,43,-14,-17,-13,-11,-12,]),'ID':([0,2,3,4,6,8,9,10,11,23,24,25,26,30,34,38,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,71,73,82,83,84,87,88,91,92,93,94,95,101,104,105,106,112,113,114,119,120,124,125,127,128,129,130,131,135,136,140,141,142,],[12,-1,-2,-3,-5,-7,-8,-9,65,67,12,69,70,12,76,76,12,-6,12,12,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,84,12,12,12,12,12,12,-20,12,-83,-84,-85,-86,-87,-35,76,-62,-63,-16,12,-19,-33,-34,12,-15,-18,-10,12,12,76,-14,-17,-13,-11,-12,]),'$end':([1,2,3,4,5,6,8,9,10,44,87,101,112,114,119,120,125,127,128,135,136,140,141,142,],[0,-1,-2,-3,-4,-5,-7,-8,-9,-6,-20,-35,-16,-19,-33,-34,-15,-18,-10,-14,-17,-13,-11,-12,]),'ASSIGN':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,47,48,50,51,52,53,54,55,56,57,65,68,72,77,79,80,81,84,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,113,115,117,118,119,120,122,124,132,133,137,138,],[46,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,82,83,-65,-66,-67,-68,-69,-70,-71,-72,88,46,46,-42,46,46,46,88,46,-79,-83,-84,-85,-86,-87,-40,46,-35,46,-41,-45,46,46,88,46,129,130,-33,-34,-46,88,-47,-48,46,46,]),'PLUS':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[50,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,50,50,50,-54,-42,50,50,50,50,-79,-83,-84,-85,-86,-87,-40,50,-35,50,-41,-45,50,50,50,-33,-34,50,-46,-47,-48,50,50,]),'MINUS':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[51,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,51,51,51,-54,-42,51,51,51,51,-79,-83,-84,-85,-86,-87,-40,51,-35,51,-41,-45,51,51,51,-33,-34,51,-46,-47,-48,51,51,]),'MULT':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[52,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,52,52,52,-54,-42,52,52,52,52,-79,-83,-84,-85,-86,-87,-40,52,-35,52,-41,-45,52,52,52,-33,-34,52,-46,-47,-48,52,52,]),'DIVIDE':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[53,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,53,53,53,-54,-42,53,53,53,53,-79,-83,-84,-85,-86,-87,-40,53,-35,53,-41,-45,53,53,53,-33,-34,53,-46,-47,-48,53,53,]),'REMINDER':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[54,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,54,54,54,-54,-42,54,54,54,54,-79,-83,-84,-85,-86,-87,-40,54,-35,54,-41,-45,54,54,54,-33,-34,54,-46,-47,-48,54,54,]),'AND':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[55,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,55,55,55,-54,-42,55,55,55,55,-79,-83,-84,-85,-86,-87,-40,55,-35,55,-41,-45,55,55,55,-33,-34,55,-46,-47,-48,55,55,]),'OR':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[56,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,56,56,56,-54,-42,56,56,56,56,-79,-83,-84,-85,-86,-87,-40,56,-35,56,-41,-45,56,56,56,-33,-34,56,-46,-47,-48,56,56,]),'XOR':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[57,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,57,57,57,-54,-42,57,57,57,57,-79,-83,-84,-85,-86,-87,-40,57,-35,57,-41,-45,57,57,57,-33,-34,57,-46,-47,-48,57,57,]),'EQUALS':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[58,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,58,58,58,-54,-42,58,58,58,58,-79,-83,-84,-85,-86,-87,-40,58,-35,58,-41,-45,58,58,58,-33,-34,58,-46,-47,-48,58,58,]),'NE':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[59,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,59,59,59,-54,-42,59,59,59,59,-79,-83,-84,-85,-86,-87,-40,59,-35,59,-41,-45,59,59,59,-33,-34,59,-46,-47,-48,59,59,]),'LT':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[60,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,60,60,60,-54,-42,60,60,60,60,-79,-83,-84,-85,-86,-87,-40,60,-35,60,-41,-45,60,60,60,-33,-34,60,-46,-47,-48,60,60,]),'GT':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[61,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,61,61,61,-54,-42,61,61,61,61,-79,-83,-84,-85,-86,-87,-40,61,-35,61,-41,-45,61,61,61,-33,-34,61,-46,-47,-48,61,61,]),'LE':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[62,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,62,62,62,-54,-42,62,62,62,62,-79,-83,-84,-85,-86,-87,-40,62,-35,62,-41,-45,62,62,62,-33,-34,62,-46,-47,-48,62,62,]),'GE':([7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,72,75,76,77,79,80,81,89,90,91,92,93,94,95,97,100,101,102,103,107,108,109,115,119,120,121,122,132,133,137,138,],[63,-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,63,63,63,-54,-42,63,63,63,63,-79,-83,-84,-85,-86,-87,-40,63,-35,63,-41,-45,63,63,63,-33,-34,63,-46,-47,-48,63,63,]),'MUT':([11,],[64,]),'RPAREN':([12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,68,77,79,80,81,90,91,92,93,94,95,96,97,101,103,107,108,109,119,120,122,132,133,],[-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,97,-42,-50,-36,-80,-79,-83,-84,-85,-86,-87,116,-40,-35,-41,-45,-81,-82,-33,-34,-46,-47,-48,]),'RBRACKET':([12,13,14,15,16,17,18,19,20,21,22,27,28,29,31,32,33,36,37,39,40,41,42,43,72,77,79,80,81,90,91,92,93,94,95,97,100,101,102,103,107,108,109,119,120,122,132,133,],[-54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-55,-56,-57,-37,-38,-39,-43,-44,-49,-58,-59,-60,-61,101,-42,-50,-36,-80,-79,-83,-84,-85,-86,-87,-40,119,-35,120,-41,-45,-81,-82,-33,-34,-46,-47,-48,]),'AS':([12,],[66,]),'COLON':([65,69,70,84,],[85,98,99,110,]),'SIGNINTTYPE':([66,85,98,99,110,],[91,91,91,91,91,]),'UNSIGNINTTYPE':([66,85,98,99,110,],[92,92,92,92,92,]),'FLOATTYPE':([66,85,98,99,110,],[93,93,93,93,93,]),'BOOLTYPE':([66,85,98,99,110,],[94,94,94,94,94,]),'CHARTYPE':([66,85,98,99,110,],[95,95,95,95,95,]),'ELSE':([101,107,119,120,],[-35,123,-33,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stmt':([0,30,],[1,71,]),'decl_stmt':([0,30,],[2,2,]),'expr_stmt':([0,30,],[3,3,]),'item':([0,30,],[5,73,]),'let_decl':([0,30,],[6,6,]),'expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,124,129,130,],[7,68,72,79,80,81,89,100,102,108,109,89,115,89,89,137,138,]),'fn_item':([0,30,],[8,8,]),'const_item':([0,30,],[9,9,]),'static_item':([0,30,],[10,10,]),'literal':([0,24,30,34,38,39,45,46,65,71,73,82,83,84,88,104,113,124,129,130,131,],[13,13,13,75,75,13,13,13,13,13,13,13,13,13,13,121,13,13,13,13,139,]),'block_expr':([0,24,30,35,39,45,46,65,71,73,74,78,82,83,84,88,113,116,123,124,129,130,],[14,14,14,77,14,14,14,14,14,14,103,107,14,14,14,14,14,128,133,14,14,14,]),'binop_expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,124,129,130,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'paren_expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,124,129,130,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'while_expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,124,129,130,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'loop_expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,124,129,130,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'break_expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,124,129,130,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'continue_expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,124,129,130,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'if_expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,123,124,129,130,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,132,21,21,21,]),'return_expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,124,129,130,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'num_lit':([0,24,30,34,38,39,45,46,65,71,73,82,83,84,88,104,113,124,129,130,131,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'bool_lit':([0,24,30,34,38,39,45,46,65,71,73,82,83,84,88,104,113,124,129,130,131,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'lit_suffix':([0,24,30,34,38,39,45,46,65,71,73,82,83,84,88,104,113,124,129,130,131,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'type_cast_expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,124,129,130,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'assignment_expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,124,129,130,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'compound_assignment_expr':([0,24,30,39,45,46,65,71,73,82,83,84,88,113,124,129,130,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'binop':([7,68,72,75,79,80,81,89,100,102,108,109,115,121,137,138,],[45,45,45,104,45,45,45,45,45,45,45,45,45,131,45,45,]),'arith_op':([7,68,72,75,79,80,81,89,100,102,108,109,115,121,137,138,],[47,47,47,105,47,47,47,47,47,47,47,47,47,105,47,47,]),'bitwise_op':([7,68,72,75,79,80,81,89,100,102,108,109,115,121,137,138,],[48,48,48,106,48,48,48,48,48,48,48,48,48,106,48,48,]),'comp_op':([7,68,72,75,79,80,81,89,100,102,108,109,115,121,137,138,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'no_struct_literal_expr':([34,38,],[74,78,]),'init':([65,84,113,124,],[86,111,126,134,]),'type':([66,85,98,99,110,],[90,113,117,118,124,]),'else_tail':([107,],[122,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stmt","S'",1,None,None,None),
  ('stmt -> decl_stmt','stmt',1,'p_statement','rust_yacc.py',20),
  ('stmt -> expr_stmt','stmt',1,'p_statement','rust_yacc.py',21),
  ('stmt -> SEMICOLON','stmt',1,'p_statement','rust_yacc.py',22),
  ('decl_stmt -> item','decl_stmt',1,'p_decl_stmt','rust_yacc.py',30),
  ('decl_stmt -> let_decl','decl_stmt',1,'p_decl_stmt','rust_yacc.py',31),
  ('expr_stmt -> expr SEMICOLON','expr_stmt',2,'p_expr_stmt','rust_yacc.py',36),
  ('item -> fn_item','item',1,'p_item','rust_yacc.py',41),
  ('item -> const_item','item',1,'p_item','rust_yacc.py',42),
  ('item -> static_item','item',1,'p_item','rust_yacc.py',43),
  ('fn_item -> FN ID LPAREN RPAREN block_expr','fn_item',5,'p_fn_item','rust_yacc.py',48),
  ('const_item -> CONST ID COLON type ASSIGN expr SEMICOLON','const_item',7,'p_const_item','rust_yacc.py',53),
  ('static_item -> STATIC ID COLON type ASSIGN expr SEMICOLON','static_item',7,'p_static_item','rust_yacc.py',58),
  ('let_decl -> LET MUT ID COLON type init SEMICOLON','let_decl',7,'p_let_decl','rust_yacc.py',63),
  ('let_decl -> LET MUT ID COLON type SEMICOLON','let_decl',6,'p_let_decl','rust_yacc.py',64),
  ('let_decl -> LET MUT ID init SEMICOLON','let_decl',5,'p_let_decl','rust_yacc.py',65),
  ('let_decl -> LET MUT ID SEMICOLON','let_decl',4,'p_let_decl','rust_yacc.py',66),
  ('let_decl -> LET ID COLON type init SEMICOLON','let_decl',6,'p_let_decl','rust_yacc.py',67),
  ('let_decl -> LET ID COLON type SEMICOLON','let_decl',5,'p_let_decl','rust_yacc.py',68),
  ('let_decl -> LET ID init SEMICOLON','let_decl',4,'p_let_decl','rust_yacc.py',69),
  ('let_decl -> LET ID SEMICOLON','let_decl',3,'p_let_decl','rust_yacc.py',70),
  ('init -> ASSIGN expr','init',2,'p_init','rust_yacc.py',92),
  ('init -> expr','init',1,'p_init','rust_yacc.py',93),
  ('expr -> literal','expr',1,'p_expr','rust_yacc.py',101),
  ('expr -> block_expr','expr',1,'p_expr','rust_yacc.py',102),
  ('expr -> binop_expr','expr',1,'p_expr','rust_yacc.py',103),
  ('expr -> paren_expr','expr',1,'p_expr','rust_yacc.py',104),
  ('expr -> while_expr','expr',1,'p_expr','rust_yacc.py',105),
  ('expr -> loop_expr','expr',1,'p_expr','rust_yacc.py',106),
  ('expr -> break_expr','expr',1,'p_expr','rust_yacc.py',107),
  ('expr -> continue_expr','expr',1,'p_expr','rust_yacc.py',108),
  ('expr -> if_expr','expr',1,'p_expr','rust_yacc.py',109),
  ('expr -> return_expr','expr',1,'p_expr','rust_yacc.py',110),
  ('block_expr -> LBRACKET stmt expr RBRACKET','block_expr',4,'p_block_expr','rust_yacc.py',115),
  ('block_expr -> LBRACKET item expr RBRACKET','block_expr',4,'p_block_expr','rust_yacc.py',116),
  ('block_expr -> LBRACKET expr RBRACKET','block_expr',3,'p_block_expr','rust_yacc.py',117),
  ('binop_expr -> expr binop expr','binop_expr',3,'p_binop_expr','rust_yacc.py',125),
  ('binop_expr -> type_cast_expr','binop_expr',1,'p_binop_expr','rust_yacc.py',126),
  ('binop_expr -> assignment_expr','binop_expr',1,'p_binop_expr','rust_yacc.py',127),
  ('binop_expr -> compound_assignment_expr','binop_expr',1,'p_binop_expr','rust_yacc.py',128),
  ('paren_expr -> LPAREN expr RPAREN','paren_expr',3,'p_paren_expr','rust_yacc.py',136),
  ('while_expr -> WHILE no_struct_literal_expr block_expr','while_expr',3,'p_while_expr','rust_yacc.py',141),
  ('loop_expr -> LOOP block_expr','loop_expr',2,'p_loop_expr','rust_yacc.py',146),
  ('break_expr -> BREAK','break_expr',1,'p_break_expr','rust_yacc.py',151),
  ('continue_expr -> CONTINUE','continue_expr',1,'p_continue_expr','rust_yacc.py',156),
  ('if_expr -> IF no_struct_literal_expr block_expr','if_expr',3,'p_if_expr','rust_yacc.py',161),
  ('if_expr -> IF no_struct_literal_expr block_expr else_tail','if_expr',4,'p_if_expr','rust_yacc.py',162),
  ('else_tail -> ELSE if_expr','else_tail',2,'p_else_tail','rust_yacc.py',170),
  ('else_tail -> ELSE block_expr','else_tail',2,'p_else_tail','rust_yacc.py',171),
  ('return_expr -> RETURN','return_expr',1,'p_return_expr','rust_yacc.py',176),
  ('return_expr -> RETURN expr','return_expr',2,'p_return_expr','rust_yacc.py',177),
  ('no_struct_literal_expr -> literal','no_struct_literal_expr',1,'p_no_struct_literal_expr','rust_yacc.py',184),
  ('no_struct_literal_expr -> literal binop literal','no_struct_literal_expr',3,'p_no_struct_literal_expr','rust_yacc.py',185),
  ('no_struct_literal_expr -> literal binop literal binop literal','no_struct_literal_expr',5,'p_no_struct_literal_expr','rust_yacc.py',186),
  ('lit_suffix -> ID','lit_suffix',1,'p_lit_suffix','rust_yacc.py',196),
  ('literal -> num_lit','literal',1,'p_literal','rust_yacc.py',200),
  ('literal -> bool_lit','literal',1,'p_literal','rust_yacc.py',201),
  ('literal -> lit_suffix','literal',1,'p_literal','rust_yacc.py',202),
  ('num_lit -> INTEGER','num_lit',1,'p_num_lit','rust_yacc.py',207),
  ('num_lit -> FLOAT','num_lit',1,'p_num_lit','rust_yacc.py',208),
  ('bool_lit -> TRUE','bool_lit',1,'p_bool_lit','rust_yacc.py',213),
  ('bool_lit -> FALSE','bool_lit',1,'p_bool_lit','rust_yacc.py',214),
  ('binop -> arith_op','binop',1,'p_binop','rust_yacc.py',219),
  ('binop -> bitwise_op','binop',1,'p_binop','rust_yacc.py',220),
  ('binop -> comp_op','binop',1,'p_binop','rust_yacc.py',221),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','rust_yacc.py',226),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','rust_yacc.py',227),
  ('arith_op -> MULT','arith_op',1,'p_arith_op','rust_yacc.py',228),
  ('arith_op -> DIVIDE','arith_op',1,'p_arith_op','rust_yacc.py',229),
  ('arith_op -> REMINDER','arith_op',1,'p_arith_op','rust_yacc.py',230),
  ('bitwise_op -> AND','bitwise_op',1,'p_bitwise_op','rust_yacc.py',235),
  ('bitwise_op -> OR','bitwise_op',1,'p_bitwise_op','rust_yacc.py',236),
  ('bitwise_op -> XOR','bitwise_op',1,'p_bitwise_op','rust_yacc.py',237),
  ('comp_op -> EQUALS','comp_op',1,'p_comp_op','rust_yacc.py',242),
  ('comp_op -> NE','comp_op',1,'p_comp_op','rust_yacc.py',243),
  ('comp_op -> LT','comp_op',1,'p_comp_op','rust_yacc.py',244),
  ('comp_op -> GT','comp_op',1,'p_comp_op','rust_yacc.py',245),
  ('comp_op -> LE','comp_op',1,'p_comp_op','rust_yacc.py',246),
  ('comp_op -> GE','comp_op',1,'p_comp_op','rust_yacc.py',247),
  ('type_cast_expr -> ID AS type','type_cast_expr',3,'p_type_cast_expr','rust_yacc.py',252),
  ('assignment_expr -> expr ASSIGN expr','assignment_expr',3,'p_assignment_expr','rust_yacc.py',257),
  ('compound_assignment_expr -> expr arith_op ASSIGN expr','compound_assignment_expr',4,'p_compound_assignment_expr','rust_yacc.py',262),
  ('compound_assignment_expr -> expr bitwise_op ASSIGN expr','compound_assignment_expr',4,'p_compound_assignment_expr','rust_yacc.py',263),
  ('type -> SIGNINTTYPE','type',1,'p_type','rust_yacc.py',268),
  ('type -> UNSIGNINTTYPE','type',1,'p_type','rust_yacc.py',269),
  ('type -> FLOATTYPE','type',1,'p_type','rust_yacc.py',270),
  ('type -> BOOLTYPE','type',1,'p_type','rust_yacc.py',271),
  ('type -> CHARTYPE','type',1,'p_type','rust_yacc.py',272),
]
